version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: eventsbooking-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-events}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eventsbooking-migrations
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-events}
    command: ["node", "dist/scripts/runMigrations.js"]
    restart: "no"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eventsbooking-app
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-events}
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  db-data:
